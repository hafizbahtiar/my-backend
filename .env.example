# ============================================
# Template Backend - Environment Variables
# ============================================
# Tech Stack: Bun + Hono + MongoDB (Mongoose) + Redis
# Created: 2025
# ============================================

# ============================================
# SERVER CONFIGURATION
# ============================================

# Server port (default: 3000)
PORT=3000

# Node environment (development | production | test)
NODE_ENV=development

# ============================================
# DATABASE CONFIGURATION
# ============================================

# MongoDB connection URI (REQUIRED)
# Format: mongodb://username:password@host:port/database?options
# Local: mongodb://localhost:27017/template-backend-hono
# Cloud: mongodb+srv://username:password@cluster.mongodb.net/database
MONGODB_URI=mongodb://localhost:27017/template-backend-hono

# ============================================
# JWT CONFIGURATION (REQUIRED)
# ============================================

# JWT secret key (MUST be at least 32 characters long)
# Generate with: openssl rand -base64 32
# Or run: bun run generate:secret
JWT_SECRET=IrOQp4i2edTiIZ0M5VSGLKwCAYau1jcBe9/2d6JHEOQ=

# Access token expiry (default: 15m)
# Format: 15m, 1h, 7d, etc.
ACCESS_TOKEN_EXPIRY=15m

# Refresh token expiry (default: 7d)
# Format: 1h, 7d, 30d, etc.
REFRESH_TOKEN_EXPIRY=7d

# ============================================
# GOOGLE OAUTH CONFIGURATION (OPTIONAL)
# ============================================

# Google OAuth Client ID
# Get from: https://console.cloud.google.com
# Format: xxxxx.apps.googleusercontent.com
GOOGLE_CLIENT_ID=

# Google OAuth Client Secret
# Get from: https://console.cloud.google.com
GOOGLE_CLIENT_SECRET=

# Google OAuth Redirect URI
# Must match the URI in your Google OAuth app settings
GOOGLE_REDIRECT_URI=

# Google OAuth Scopes (comma-separated)
# Example: email,profile,openid
GOOGLE_SCOPES=email,profile

# Google OAuth Token URI
GOOGLE_TOKEN_URI=https://oauth2.googleapis.com/token

# Google OAuth Auth URI
GOOGLE_AUTH_URI=https://accounts.google.com/o/oauth2/v2/auth

# Google OAuth User Info URI
GOOGLE_USER_INFO_URI=https://www.googleapis.com/oauth2/v2/userinfo

# Google OAuth User Info Email Field
GOOGLE_USER_INFO_EMAIL=email

# Google OAuth User Info Name Field
GOOGLE_USER_INFO_NAME=name

# ============================================
# CORS CONFIGURATION
# ============================================

# CORS allowed origins
# Development: * (allow all)
# Production: https://yourdomain.com,https://app.yourdomain.com
# Separate multiple origins with comma
CORS_ORIGIN=*

# ============================================
# SECURITY CONFIGURATION
# ============================================

# Bcrypt rounds for password hashing (legacy, using Argon2id instead)
# Not used, kept for backward compatibility
BCRYPT_ROUNDS=10

# Argon2id memory cost in KB (default: 64MB = 65536 KB)
# Higher values = more secure but slower
ARGON2_MEMORY=65536

# Argon2id time cost (default: 3 iterations)
# Higher values = more secure but slower
ARGON2_TIME=3

# Argon2id parallelism (default: 4 threads)
# Higher values = faster on multi-core systems
ARGON2_PARALLELISM=4

# ============================================
# REDIS CONFIGURATION (OPTIONAL)
# ============================================

# Redis connection URL
# Format: redis://username:password@host:port/database
# Local: redis://localhost:6379
# Cloud: redis://username:password@host:port/database
REDIS_URL=redis://localhost:6379

# ============================================
# EMAIL CONFIGURATION (OPTIONAL)
# ============================================

# SMTP Host (e.g., smtp.gmail.com, smtp.sendgrid.net)
SMTP_HOST=

# SMTP Port (587 for TLS, 465 for SSL, 25 for no encryption)
SMTP_PORT=587

# Use secure connection (true for 465, false for 587/25)
SMTP_SECURE=false

# SMTP Username
SMTP_USER=

# SMTP Password
SMTP_PASSWORD=

# From email address
SMTP_FROM=

# From name (display name)
SMTP_FROM_NAME="Template Backend"

# Your app base URL (for generating reset links)
APP_BASE_URL=http://localhost:3000

# ============================================
# FILE STORAGE CONFIGURATION
# ============================================

# File upload path (default: ./uploads)
UPLOAD_PATH=./uploads

# Maximum file size in bytes (default: 5MB = 5242880)
MAX_FILE_SIZE=5242880

# Storage provider (local | s3 | cloudinary)
STORAGE_PROVIDER=local

# ============================================
# RATE LIMITING CONFIGURATION (OPTIONAL)
# ============================================

# Rate limit window in milliseconds (default: 15 minutes)
RATE_LIMIT_WINDOW_MS=900000

# Max requests per window (default: 100)
RATE_LIMIT_MAX_REQUESTS=100

# ============================================
# LOGGING CONFIGURATION (OPTIONAL)
# ============================================

# Log level (debug | info | warn | error)
LOG_LEVEL=info

# ============================================
# PRODUCTION NOTES
# ============================================
# 
# 1. Generate a secure JWT_SECRET:
#    - Use: openssl rand -base64 32
#    - Or run: bun run generate:secret:prod
#    - Or use a password manager to generate random string
#
# 2. Set NODE_ENV=production in production
#
# 3. Use strong database credentials
#
# 4. Set CORS_ORIGIN to specific domains
#
# 5. Never commit .env file to version control
#
# 6. Use environment-specific files:
#    - .env.development
#    - .env.production
#    - .env.test
#
# 7. For Docker deployment, use environment variables
#    instead of .env file for better security
#
# 8. Configure Redis for production to improve performance
#
# 9. Set up email service for password reset and verification
#
# 10. Configure file storage provider for production
#
# ============================================